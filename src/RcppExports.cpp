// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// demo_read_file
std::string demo_read_file(std::string filename);
RcppExport SEXP _RcppIconvExample_demo_read_file(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(demo_read_file(filename));
    return rcpp_result_gen;
END_RCPP
}
// demo_read_file_enc
std::string demo_read_file_enc(std::string filename, std::string encoding);
RcppExport SEXP _RcppIconvExample_demo_read_file_enc(SEXP filenameSEXP, SEXP encodingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type encoding(encodingSEXP);
    rcpp_result_gen = Rcpp::wrap(demo_read_file_enc(filename, encoding));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppIconvExample_demo_read_file", (DL_FUNC) &_RcppIconvExample_demo_read_file, 1},
    {"_RcppIconvExample_demo_read_file_enc", (DL_FUNC) &_RcppIconvExample_demo_read_file_enc, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppIconvExample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
